use std::fs::File;
use std::io::prelude::*;
use std::cmp::{max, min};

use fehler::throws;
type Error = anyhow::Error;

const WIDTH: usize = 1024;
const HEIGHT: usize = 768;

type Vec3f = [f32; 3];

#[throws]
fn main() {
    let mut framebuffer: [Vec3f; WIDTH * HEIGHT] = [Vec3f::default(); WIDTH * HEIGHT];
    for j in 0..HEIGHT {
        for i in 0..WIDTH {
            framebuffer[i + j * WIDTH] = Vec3f(j as f32 / (HEIGHT as f32), i as f32 / (WIDTH as f32), 0.0);
        }
    }

    // Write image
    let mut file = File::create("out.ppm")?;
    file.write_fmt(format_args!("P6\n{} {}\n255\n", WIDTH, HEIGHT))?;
    // for (size_t i = 0; i < height*width; ++i) {
    //     for (size_t j = 0; j<3; j++) {
    //         ofs << (char)(255 * std::max(0.f, std::min(1.f, framebuffer[i][j])));
    //     }
    // }
    for i in 0..HEIGHT * WIDTH {
        for j in 0..3 {
            let byte = if framebuffer[i][j] > 1.0 {
                255.0
            } else if framebuffer[i][j] < 0.0 {
                0.0
            } else {
                255.0 * framebuffer[i][j];
            };
        }
    }
}
